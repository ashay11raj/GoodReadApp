{"version":3,"sources":["components/SummaryBook.js","components/BookList.js","components/DetailedBook.js","components/SearchBook.js","App.js","serviceWorker.js","index.js"],"names":["summaryBook","props","react_default","a","createElement","key","book","id","className","onClick","getSelectedBookDetails","src","best_book","image_url","height","width","title","author","name","average_rating","bookList","listOfBooks","map","index","SummaryBook","detailedBook","console","log","bookDetails","img","ratings","description","getListOfBooks","query","axios","get","concat","then","response","getBookDetails","SearchBook","state","selectedBookId","extractBookDetails","result","GoodreadsResponse","authors","replace","getBookList","input","_this","setState","showLoading","current","value","resp","parseString","data","err","search","results","work","bookId","loadingDiv","_this2","this","React","createRef","length","BookList","DetailedBook","placeholder","ref","Component","App","components_SearchBook","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a726a11.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst summaryBook = (props) => {\r\n    return (\r\n        <div key={props.book.id[0][\"_\"]} className=\"summary-book\" onClick={() => props.getSelectedBookDetails(props.book.id[0][\"_\"])}>\r\n            <table>\r\n                <tr>\r\n                    <td>\r\n                        <img src={props.book.best_book[0].image_url[0]} height=\"80\" width=\"80\"></img>\r\n                    </td>\r\n                    <td>\r\n                        <tr>\r\n                            <b>Book Title: </b> {props.book.best_book[0].title[0]}                                            \r\n                        </tr>\r\n                        <tr>\r\n                            <b>Author: </b> {props.book.best_book[0].author[0].name[0]}            \r\n                        </tr>\r\n                        <tr>\r\n                            <b>Rating: </b> {props.book.average_rating[0]}            \r\n                        </tr>\r\n                    </td>                \r\n                </tr>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\nexport default summaryBook;","import React from 'react';\r\nimport SummaryBook from './SummaryBook';\r\n\r\nconst bookList = (props) => {\r\n    return (\r\n        <div className=\"book-list\">\r\n            {props.listOfBooks.map((book, index) => {\r\n                return <SummaryBook book={book} getSelectedBookDetails={props.getSelectedBookDetails}/>\r\n            })\r\n            }\r\n                        \r\n        </div>        \r\n    )\r\n};\r\nexport default bookList;","import React from 'react';\r\n\r\nconst detailedBook = (props) => {\r\n    console.log(\"detailedBook: \" + props);\r\n    return (\r\n        <div className=\"book-detail\">\r\n            <table>\r\n                <tr>\r\n                    <td>\r\n                        <img src={props.bookDetails.img} height=\"300\" width=\"250\"></img>\r\n                    </td>\r\n                    <td>\r\n                        <tr>\r\n                            <b>Book Title: </b> {props.bookDetails.title}                                            \r\n                        </tr>                        \r\n                        <tr>\r\n                            <b>Author: </b> {props.bookDetails.author}            \r\n                        </tr>\r\n                        <tr>\r\n                            <b>Rating: </b> {props.bookDetails.ratings}            \r\n                        </tr>\r\n                        <tr>\r\n                            <b>Description: </b> {props.bookDetails.description}            \r\n                        </tr>\r\n                    </td>                \r\n                </tr>\r\n            </table>\r\n                        \r\n        </div>        \r\n    )\r\n};\r\nexport default detailedBook;","import React from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    parseString\r\n} from 'xml2js';\r\nimport BookList from './BookList';\r\nimport DetailedBook from './DetailedBook';\r\n\r\nconst PROXY_SERVER = \"https://cors-anywhere.herokuapp.com/\";\r\nconst SUMMARY_SEARCH_URL = \"https://www.goodreads.com/search/index.xml\";\r\nconst DETAILED_SEARCH_URL = \"https://www.goodreads.com/book/show/\";\r\nconst GOOD_READ_API_KEY = \"3il0QOZERbgGbTyB16Vbxw\";\r\n\r\nconst getListOfBooks = query => {\r\n    return axios\r\n        .get(`${PROXY_SERVER}${SUMMARY_SEARCH_URL}?key=${GOOD_READ_API_KEY}&q=${query}&format=json`)\r\n        .then(response => response)\r\n}\r\nconst getBookDetails = query => {\r\n    return axios\r\n        .get(`${PROXY_SERVER}${DETAILED_SEARCH_URL}${query}.xml?key=${GOOD_READ_API_KEY}`)\r\n        .then(response => response);\r\n}\r\n\r\nclass SearchBook extends React.Component {\r\n    state = {\r\n        selectedBookId: \"\",\r\n        listOfBooks: []\r\n    }\r\n    extractBookDetails = (result) => {\r\n        let bookDetails = {\r\n            author: result.GoodreadsResponse.book[0].authors[0].author[0].name[0],\r\n            title: result.GoodreadsResponse.book[0].title[0],\r\n            img: result.GoodreadsResponse.book[0].image_url[0],\r\n            ratings: result.GoodreadsResponse.book[0].average_rating[0],\r\n            description: result.GoodreadsResponse.book[0].description[0].replace(/\\<br \\/>/g, \"\\n\").replace(/<b>/g, \"\").replace(/<\\/br>/g, \"\").replace(/<\\/b>/g, \"\")\r\n        }\r\n        return bookDetails;\r\n    }\r\n    \r\n    getBookList = (input) => {\r\n        this.setState((state, props) => ({\r\n            showLoading: true\r\n        }));\r\n        getListOfBooks(input.current.value).then((resp) =>\r\n            parseString(\r\n                resp.data,\r\n                (err, result) => {\r\n                    console.log(result);\r\n                    this.setState((state, props) => ({\r\n                        listOfBooks: result.GoodreadsResponse.search[0].results[0].work,\r\n                        showLoading: false\r\n                    })\r\n                    );                    \r\n                }\r\n            )\r\n        )\r\n    }\r\n    getSelectedBookDetails = (bookId)=>{\r\n        this.setState((state, props) => ({\r\n            showLoading: true\r\n        }));\r\n        getBookDetails(bookId).then(resp =>\r\n            parseString(\r\n                resp.data,\r\n                (err, result) => {\r\n                    let bookDetails = this.extractBookDetails(result);\r\n                    this.setState((state, props) => ({\r\n                        bookDetails: bookDetails,\r\n                        showLoading: false\r\n                    })\r\n                    );\r\n                }\r\n            )\r\n        );\r\n        \r\n    }\r\n    render() {\r\n        let input = React.createRef();\r\n        let bookList, bookDetails;\r\n        if(this.state.listOfBooks.length > 0){\r\n            bookList = <BookList listOfBooks={this.state.listOfBooks} getSelectedBookDetails={this.getSelectedBookDetails} />;\r\n        }\r\n        if(this.state.bookDetails){\r\n            bookDetails = <DetailedBook bookDetails={this.state.bookDetails}/>;\r\n        }\r\n        let loadingDiv;\r\n        if(this.state.showLoading){\r\n            loadingDiv = <img src=\"827.gif\"></img>;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"loading\">\r\n                    {loadingDiv}\r\n                </div>\r\n\r\n                <div className=\"search-input\">\r\n                    Read Books: \r\n                    <input \r\n                        placeholder=\"Please Search book here...\" ref={input} />\r\n                    <button className=\"search-btn\" onClick={() => this.getBookList(input)}>Search Book</button>\r\n                </div>\r\n                <div className=\"search-results\">\r\n                    {bookList}\r\n                </div>\r\n                <div className=\"book-details\">\r\n                    {bookDetails}\r\n                </div>                \r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default SearchBook;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SearchBook from './components/SearchBook';\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <SearchBook />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}